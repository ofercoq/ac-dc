#include "../solver/distributed/distributed_include.h"
#include "../class/Context.h"
#include "../helpers/option_console_parser.h"
#include "../solver/settingsAndStatistics.h"
#include "../utils/file_reader.h"
#include "../solver/Solver.h"
#include "../helpers/utils.h"
#include <math.h>
#include "../utils/distributed_instances_loader.h"
#include "../solver/distributed/distributed_structures.h"
#include "../helpers/option_distributed_console_parser.h"
#include "cocoaHelper.h"
#include "../solver/distributed/distributed_essentials.h"

int main(int argc, char *argv[]) {
        MPI_Init(&argc, &argv);
        mpi::environment env(argc, argv);
        mpi::communicator world;
        DistributedSettings distributedSettings;
        Context ctx(distributedSettings);
        consoleHelper::parseDistributedOptions(ctx, distributedSettings, argc,
                        argv);

        ctx.settings.verbose = true;
        if (world.rank() != 0)
                ctx.settings.verbose = false;

        ProblemData<unsigned long long, double> instance;

        cout << world.rank() << " going to load data" << endl;

        loadDistributedSparseSVMRowData(ctx.matrixAFile, world.rank(), world.size(),
                        instance, false);
        instance.lambda = ctx.lambda;

        std::vector<double> w(instance.m);
        std::vector<double> deltaW(instance.m);
        std::vector<double> deltaAlpha(instance.n);
        std::vector<double> wBuffer(instance.m);

        cblas_set_to_zero(instance.x);
        // compute local w
        //.....
        vall_reduce(world, deltaW, w);

<<<<<<< local

	instance.total_n = 10000; // FIXME

	const double gamma = 1 / (world.size() + 0.0);
=======

        instance.total_n = 10000; // FIXME

        const double gamma = 1 / (world.size() + 0.0);
>>>>>>> other

//-------------------------------------------------------
        for (unsigned int t = 0; t < distributedSettings.iters_communicate_count;
                        t++) {

<<<<<<< local
		cblas_set_to_zero(deltaW);
		cblas_set_to_zero(deltaAlpha);

		localCDMethod(instance, deltaAlpha, w, deltaW,distributedSettings);
=======
                cblas_set_to_zero(deltaW);
                cblas_set_to_zero(deltaAlpha);
>>>>>>> other

                localCDMethod(instance, deltaAlpha, w, deltaW,distributedSettings);

                cblas_sum_of_vectors(instance.x, deltaAlpha, gamma);

<<<<<<< local
		double error = computeObjectiveValue(instance, world,w);
		if (ctx.settings.verbose) {
			cout << "Iteration " << t << " error " << error << endl;
		}
	}
=======
                vall_reduce(world, deltaW, wBuffer);
                cblas_sum_of_vectors(w, wBuffer, gamma);
>>>>>>> other

                double error = computeObjectiveValue(instance, world,w);
                if (ctx.settings.verbose) {
                        cout << "Iteration " << t << " error " << error << endl;
                }
        }

        MPI::Finalize();

        return 0;
}
